# Authors: Code generated by Google Gemini and comments done by Daniel Holgate
# Date: 16/09/2025
# Description: Code for updating an lp file with the extracted events in order to use them to generate answer set
# programming outlines

import re

# Input must be changed to whatever file you store the event-description pairs with DescriptionConvert.py.
# Template lp must be the name of the base lp file taken from the answer set programming code download,
# with the function(...) part removed. 
# Output can be whatever you want the output lp file to be called.
input_filename = ""
template_lp_file = ""
output_lp_file = ""

# Method for extracting all the events (without their descriptions) and putting in a list.
def extract_event_keys(text):
    # Extracts each event up until the colon, after which comes the description which we ignore.
    keys = re.findall(r'^\s*["\']?([^"\':]+)["\']?\s*:', text, flags=re.MULTILINE)
    # Takes out duplicate events and returns.
    return list(dict.fromkeys(keys))

# Method for creating the LP function block with the extracted events.
def generate_function_block(events):
    return "function(\n  " + ";\n  ".join(events) + ";\n)."

# Method for adding the new LP function block into the LP file.
def insert_function_block(lp_text, function_block):
    # Specifies the line after which the function block should be added.
    marker = "% define all the narrative functions we can perform"
    parts = lp_text.split(marker, 1)

    if len(parts) < 2:
        print("Error: Marker not found in LP file.")
        return lp_text

    before, after = parts
    updated_lp_text = before + marker + "\n\n" + function_block + "\n\n" + after.lstrip()
    return updated_lp_text

def main():
    
    with open(input_filename, "r", encoding="utf-8") as f:
        raw_text = f.read()
    event_keys = extract_event_keys(raw_text)
    print(f"Extracted {len(event_keys)} unique keys.")

    function_block = generate_function_block(event_keys)
    print("Generated function block preview:")
    print(function_block[:300] + "\n...")

    # Reads the template LP file to keep everything the same.
    with open(template_lp_file, "r", encoding="utf-8") as f:
        lp_text = f.read()

    # Adds the function block to the extracted LP file text.
    updated_lp_text = insert_function_block(lp_text, function_block)

    # Writes to the new LP file which now will have the updated function block.
    with open(output_lp_file, "w", encoding="utf-8") as f:
        f.write(updated_lp_text)

    # print(f"Wrote updated LP file to {output_lp_file}")

if __name__ == "__main__":
    main()
